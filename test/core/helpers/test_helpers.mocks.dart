// Mocks generated by Mockito 5.4.4 from annotations
// in unlockd_assignment/test/core/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i20;
import 'dart:typed_data' as _i22;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i19;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i21;
import 'package:unlockd_assignment/core/error/failure.dart' as _i8;
import 'package:unlockd_assignment/core/storages/secure_storage.dart' as _i17;
import 'package:unlockd_assignment/features/auth/data/data_sources/auth_remote_data_source.dart'
    as _i10;
import 'package:unlockd_assignment/features/auth/data/models/user_model.dart'
    as _i3;
import 'package:unlockd_assignment/features/auth/domain/entity/user.dart'
    as _i9;
import 'package:unlockd_assignment/features/auth/domain/repositories/auth_repository.dart'
    as _i6;
import 'package:unlockd_assignment/features/auth/domain/usecases/login_user.dart'
    as _i11;
import 'package:unlockd_assignment/features/auth/domain/usecases/logout_user.dart'
    as _i18;
import 'package:unlockd_assignment/features/blog_posts/data/data_sources/blog_post_remote_data_source.dart'
    as _i14;
import 'package:unlockd_assignment/features/blog_posts/data/models/blog_post_model.dart'
    as _i15;
import 'package:unlockd_assignment/features/blog_posts/domain/entity/blog_post.dart'
    as _i13;
import 'package:unlockd_assignment/features/blog_posts/domain/repositories/blog_post_repository.dart'
    as _i12;
import 'package:unlockd_assignment/features/blog_posts/domain/usecases/get_blog_posts.dart'
    as _i16;
import 'package:unlockd_assignment/features/blog_posts/presentation/bloc/blog_post_bloc.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_1 extends _i1.SmartFake implements _i3.UserModel {
  _FakeUserModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBlogPostState_2 extends _i1.SmartFake implements _i4.BlogPostState {
  _FakeBlogPostState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.UserEntity>> loginUser(
    String? userName,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            userName,
            password,
          ],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, _i9.UserEntity>>.value(
            _FakeEither_0<_i8.Failure, _i9.UserEntity>(
          this,
          Invocation.method(
            #loginUser,
            [
              userName,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i9.UserEntity>>);

  @override
  _i7.Future<_i2.Either<_i8.Failure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, bool>>.value(
            _FakeEither_0<_i8.Failure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, bool>>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i10.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.UserModel> userLogin(
    String? userName,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #userLogin,
          [
            userName,
            password,
          ],
        ),
        returnValue: _i7.Future<_i3.UserModel>.value(_FakeUserModel_1(
          this,
          Invocation.method(
            #userLogin,
            [
              userName,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i3.UserModel>);

  @override
  _i7.Future<bool> logOutUser(String? token) => (super.noSuchMethod(
        Invocation.method(
          #logOutUser,
          [token],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [LoginUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUser extends _i1.Mock implements _i11.LoginUser {
  MockLoginUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.UserEntity>> execute(
    String? userName,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            userName,
            password,
          ],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, _i9.UserEntity>>.value(
            _FakeEither_0<_i8.Failure, _i9.UserEntity>(
          this,
          Invocation.method(
            #execute,
            [
              userName,
              password,
            ],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i9.UserEntity>>);
}

/// A class which mocks [BlogPostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogPostRepository extends _i1.Mock
    implements _i12.BlogPostRepository {
  MockBlogPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i13.BlogPostEntity>>>
      getBlogPosts() => (super.noSuchMethod(
            Invocation.method(
              #getBlogPosts,
              [],
            ),
            returnValue: _i7.Future<
                    _i2.Either<_i8.Failure, List<_i13.BlogPostEntity>>>.value(
                _FakeEither_0<_i8.Failure, List<_i13.BlogPostEntity>>(
              this,
              Invocation.method(
                #getBlogPosts,
                [],
              ),
            )),
          ) as _i7.Future<_i2.Either<_i8.Failure, List<_i13.BlogPostEntity>>>);
}

/// A class which mocks [BlogPostRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogPostRemoteDataSource extends _i1.Mock
    implements _i14.BlogPostRemoteDataSource {
  MockBlogPostRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i15.BlogPostModel>> getBlogPosts(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBlogPosts,
          [token],
        ),
        returnValue:
            _i7.Future<List<_i15.BlogPostModel>>.value(<_i15.BlogPostModel>[]),
      ) as _i7.Future<List<_i15.BlogPostModel>>);
}

/// A class which mocks [GetBlogPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBlogPosts extends _i1.Mock implements _i16.GetBlogPosts {
  MockGetBlogPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i13.BlogPostEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i7
            .Future<_i2.Either<_i8.Failure, List<_i13.BlogPostEntity>>>.value(
            _FakeEither_0<_i8.Failure, List<_i13.BlogPostEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, List<_i13.BlogPostEntity>>>);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i17.SecureStorage {
  MockSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> checkLogin() => (super.noSuchMethod(
        Invocation.method(
          #checkLogin,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);
}

/// A class which mocks [LogOutUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOutUser extends _i1.Mock implements _i18.LogOutUser {
  MockLogOutUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, bool>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, bool>>.value(
            _FakeEither_0<_i8.Failure, bool>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, bool>>);
}

/// A class which mocks [BlogPostBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogPostBloc extends _i1.Mock implements _i4.BlogPostBloc {
  MockBlogPostBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set posts(List<_i13.BlogPostEntity>? _posts) => super.noSuchMethod(
        Invocation.setter(
          #posts,
          _posts,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.BlogPostState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeBlogPostState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.BlogPostState);

  @override
  _i7.Stream<_i4.BlogPostState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i4.BlogPostState>.empty(),
      ) as _i7.Stream<_i4.BlogPostState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i4.BlogPostEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i4.BlogPostEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.BlogPostState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i4.BlogPostEvent>(
    _i19.EventHandler<E, _i4.BlogPostState>? handler, {
    _i19.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i19.Transition<_i4.BlogPostEvent, _i4.BlogPostState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onChange(_i19.Change<_i4.BlogPostState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i20.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i21.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i22.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i22.Uint8List>.value(_i22.Uint8List(0)),
      ) as _i7.Future<_i22.Uint8List>);

  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
